{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyutils Documentation","text":"<p>This is pyutils project.</p>"},{"location":"#getting-start","title":"Getting Start","text":""},{"location":"#installation","title":"Installation","text":"<p>install for development</p> <pre><code>git clone https://github.com/tanganke/pyutils\ncd tmdpdf\npip install -r requirements.txt\npip install -e .\n</code></pre> <p>or install for usage</p> <pre><code>pip install git+https://github.com/tanganke/pyutils\n</code></pre>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\npyutils/\n    ...\nscripts/      # entrypoints\n</code></pre>"},{"location":"#mkdocs-commands","title":"Mkdocs Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> <li><code>mkdocs gh-deploy --force --no-history</code> - update github pages mannually.</li> </ul>"},{"location":"api/pyutils/","title":"pyutils","text":""},{"location":"api/pyutils/#pyutils","title":"<code>pyutils</code>","text":"<p>misc usefull functions and classes.</p>"},{"location":"api/pyutils/#pyutils.args","title":"<code>pyutils.args</code>","text":""},{"location":"api/pyutils/#pyutils.args.verify_str_arg","title":"<code>pyutils.args.verify_str_arg(value, arg=None, valid_values=None, custom_msg=None, to_lower=False)</code>","text":"<p>check is string argument <code>value</code> with name <code>arg</code> in <code>valid_values</code>, raise <code>ValueError</code> if failed.</p> <p>Examples:</p> <p>if you have a function <code>f</code> accept <code>batch_size</code> as argument, such as:</p> <pre><code>def f(batch_size='half'):\nverify_str_arg(batch_size, 'batch_size', ['half', 'full'])\n...\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>T</code> <p><code>str</code> or <code>bytes</code></p> required <code>arg</code> <code>Optional[str]</code> <p>. Defaults to None.</p> <code>None</code> <code>valid_values</code> <code>Iterable[T]</code> <p>Defaults to <code>None</code>. if this is <code>None</code>, accept any string input.</p> <code>None</code> <code>custom_msg</code> <code>Optional[str]</code> <p>Defaults to \"Unknown value '{value}' for argument {arg}. Valid values are {{{valid_values}}}.\".</p> <code>None</code> <code>to_lower(bool)</code> <p>if <code>True</code>, accept uppercase value.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>value</p> Source code in <code>pyutils/args.py</code> <pre><code>def verify_str_arg(\nvalue: T,\narg: Optional[str] = None,\nvalid_values: Iterable[T] = None,\ncustom_msg: Optional[str] = None,\nto_lower: bool = False,\n) -&gt; T:\nR\"\"\"\n    check is string argument ``value`` with name ``arg`` in `valid_values`, raise `ValueError` if failed.\n    Examples:\n        if you have a function ``f`` accept `batch_size` as argument, such as:\n        ```python\n        def f(batch_size='half'):\n            verify_str_arg(batch_size, 'batch_size', ['half', 'full'])\n            ...\n        ```\n    Args:\n        value (T): `str` or `bytes`\n        arg (Optional[str], optional): . Defaults to None.\n        valid_values (Iterable[T], optional): Defaults to `None`. if this is `None`, accept any string input.\n        custom_msg (Optional[str], optional): Defaults to \"Unknown value '{value}' for argument {arg}. Valid values are {{{valid_values}}}.\".\n        to_lower(bool): if `True`, accept uppercase value.\n    Raises:\n        ValueError:\n    Returns:\n        T: value\n    \"\"\"\nif not isinstance(value, (str, bytes)):\nif arg is None:\nmsg = \"Expected type str, but got type {type}.\"\nelse:\nmsg = \"Expected type str for argument {arg}, but got type {type}.\"\nmsg = msg.format(type=type(value), arg=arg)\nraise ValueError(msg)\nelse:\nif valid_values is None:\nreturn value\nif to_lower:\nvalue = value.lower()\nif value not in valid_values:\nif custom_msg is not None:\nmsg = custom_msg\nelse:\nmsg = \"Unknown value '{value}' for argument {arg}. Valid values are {{{valid_values}}}.\"\nmsg = msg.format(\nvalue=value, arg=arg, valid_values=_iterable_to_str(valid_values)\n)\nraise ValueError(msg)\nreturn value\n</code></pre>"},{"location":"api/pyutils/#pyutils.collections","title":"<code>pyutils.collections</code>","text":""},{"location":"api/pyutils/#pyutils.collections.dict","title":"<code>pyutils.collections.dict</code>","text":""},{"location":"api/pyutils/#pyutils.collections.dict.dict_map","title":"<code>pyutils.collections.dict.dict_map(f, d, *, max_level=-1, skip_levels=0, inplace=False)</code>","text":"<p>\u5bf9d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u7528f\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u5178</p> <p>Parameters:</p> Name Type Description Default <code>f</code> <code>_type_</code> <p>function</p> required <code>d</code> <code>dict</code> <p>\u539f\u5b57\u5178</p> required <code>max_level</code> <code>int</code> <p>\u4f5c\u7528\u7684\u6df1\u5ea6\uff0c -1 \u8868\u793a\u65e0\u9650\u6df1. Defaults to -1.</p> <code>-1</code> <code>skip_levels</code> <code>int</code> <p>\u8df3\u8fc7\u7684\u5c42\u6570. Defaults to 0.</p> <code>0</code> <code>inplace</code> <code>bool</code> <p>Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>dict</code> <p>\u8f6c\u6362\u540e\u7684\u5b57\u5178</p> Source code in <code>pyutils/collections/dict.py</code> <pre><code>def dict_map(f, d: dict, *, max_level: int = -1, skip_levels=0, inplace=False):\n\"\"\"\u5bf9d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4f5c\u7528f\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u5b57\u5178\n    Args:\n        f (_type_): function\n        d (dict): \u539f\u5b57\u5178\n        max_level (int, optional): \u4f5c\u7528\u7684\u6df1\u5ea6\uff0c -1 \u8868\u793a\u65e0\u9650\u6df1. Defaults to -1.\n        skip_levels (int, optional): \u8df3\u8fc7\u7684\u5c42\u6570. Defaults to 0.\n        inplace (bool, optional): Defaults to False.\n    Returns:\n        dict: \u8f6c\u6362\u540e\u7684\u5b57\u5178\n    \"\"\"\nif not isinstance(d, dict):\nraise TypeError(\"dict_map: d must be a dict\")\nif inplace:\nans = d\nelse:\nans = deepcopy(d)\ndef dict_map_impl(from_dict, to_dict, level):\nif level == max_level:\nreturn\nfor k in from_dict.keys():\nif isinstance(from_dict[k], dict):\ndict_map_impl(from_dict[k], to_dict[k], level + 1)\nelse:\nif level &lt; skip_levels:\ncontinue\nelse:\nto_dict[k] = f(from_dict[k])\ndict_map_impl(d, ans, 0)\nreturn ans\n</code></pre>"},{"location":"api/pyutils/#pyutils.collections.list","title":"<code>pyutils.collections.list</code>","text":""},{"location":"api/pyutils/#pyutils.collections.list.group_by","title":"<code>pyutils.collections.list.group_by(lst, fn)</code>","text":"<p>Groups the elements of a list based on the given function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from math import floor\n</code></pre> <pre><code>&gt;&gt;&gt; group_by([6.1, 4.2, 6.3], floor)  # {4: [4.2], 6: [6.1, 6.3]}\n&gt;&gt;&gt; group_by([\"one\", \"two\", \"three\"], len)  # {3: ['one', 'two'], 5: ['three']}\n</code></pre> <p>Returns:</p> Type Description <p>defaultdict</p> Source code in <code>pyutils/collections/list.py</code> <pre><code>def group_by(lst: Iterable, fn: Callable[[Any], Any]):\nR\"\"\"\n    Groups the elements of a list based on the given function.\n    Examples:\n        &gt;&gt;&gt; from math import floor\n        &gt;&gt;&gt; group_by([6.1, 4.2, 6.3], floor)  # {4: [4.2], 6: [6.1, 6.3]}\n        &gt;&gt;&gt; group_by([\"one\", \"two\", \"three\"], len)  # {3: ['one', 'two'], 5: ['three']}\n    Returns:\n        defaultdict\n    \"\"\"\nd = defaultdict(list)\nfor el in lst:\nd[fn(el)].append(el)\nreturn dict(d)\n</code></pre>"},{"location":"api/pyutils/#pyutils.collections.list.list_ignore","title":"<code>pyutils.collections.list.list_ignore(iter, ignore=None)</code>","text":"<p>\u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868\uff0c\u4e22\u5f03ignore\u6307\u5b9a\u7684\u5143\u7d20</p> <p>Parameters:</p> Name Type Description Default <code>iter</code> <code>Iterable</code> <p>description</p> required <code>ignore</code> <code>_type_</code> <p>description. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>list</p> Source code in <code>pyutils/collections/list.py</code> <pre><code>def list_ignore(iter: Iterable, ignore=None) -&gt; list:\n\"\"\"\n    \u8fd4\u56de\u4e00\u4e2a\u65b0\u5217\u8868\uff0c\u4e22\u5f03ignore\u6307\u5b9a\u7684\u5143\u7d20\n    Args:\n        iter (Iterable): _description_\n        ignore (_type_, optional): _description_. Defaults to None.\n    Returns:\n        list\n    \"\"\"\nif ignore is None:\nreturn [item for item in iter if item is not None]\nelse:\nreturn [item for item in iter if item in ignore]\n</code></pre>"},{"location":"api/pyutils/#pyutils.collections.list.sorted_list","title":"<code>pyutils.collections.list.sorted_list(iter)</code>","text":"<p>convert iterable object <code>iter</code> to sorted list</p> Source code in <code>pyutils/collections/list.py</code> <pre><code>def sorted_list(iter: Iterable) -&gt; list:\n\"\"\"\n    convert iterable object `iter` to sorted list\n    \"\"\"\nans = list(iter)\nans.sort()\nreturn ans\n</code></pre>"},{"location":"api/pyutils/#pyutils.color","title":"<code>pyutils.color</code>","text":""},{"location":"api/pyutils/#pyutils.color.color_space","title":"<code>pyutils.color.color_space</code>","text":""},{"location":"api/pyutils/#pyutils.color.color_space.hex_to_rgb","title":"<code>pyutils.color.color_space.hex_to_rgb(hex)</code>","text":"<p>Converts a hexadecimal color code to a tuple of integers corresponding to its RGB components.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; hex_to_rgb('FFA501') # (255, 165, 1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>hex</code> <code>str</code> <p>'#000000' or '000000'</p> required <p>Returns:</p> Type Description <code>Tuple[int, int, int]</code> <p>Tuple[int,int,int]: color in RGB color space.</p> Source code in <code>pyutils/color/color_space.py</code> <pre><code>def hex_to_rgb(hex: str) -&gt; Tuple[int, int, int]:\n\"\"\"\n    Converts a hexadecimal color code to a tuple of\n    integers corresponding to its RGB components.\n    Examples:\n        &gt;&gt;&gt; hex_to_rgb('FFA501') # (255, 165, 1)\n    Args:\n        hex (str): '#000000' or '000000'\n    Returns:\n        Tuple[int,int,int]: color in RGB color space.\n    \"\"\"\nif hex[0] == \"#\":\nhex = hex[1:]\nassert len(hex) == 6\nreturn tuple(int(hex[i : i + 2], 16) for i in (0, 2, 4))\n</code></pre>"},{"location":"api/pyutils/#pyutils.file","title":"<code>pyutils.file</code>","text":""},{"location":"api/pyutils/#pyutils.file.json","title":"<code>pyutils.file.json</code>","text":""},{"location":"api/pyutils/#pyutils.file.json.print_json","title":"<code>pyutils.file.json.print_json(j, indent='  ', verbose=False)</code>","text":"<p>print an overview of json file</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; print_json(open('path_to_json', 'r'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>j</code> <code>dict</code> <p>loaded json file</p> required <code>indent</code> <code>str</code> <p>Defaults to '  '.</p> <code>'  '</code> Source code in <code>pyutils/file/json.py</code> <pre><code>def print_json(j: dict, indent=\"  \", verbose: bool = False):\nR\"\"\"print an overview of json file\n    Examples:\n        &gt;&gt;&gt; print_json(open('path_to_json', 'r'))\n    Args:\n        j (dict): loaded json file\n        indent (str, optional): Defaults to '  '.\n    \"\"\"\ndef _print_json(j: dict, level):\ndef _sprint(s):\nreturn indent * level + s\nfor k in j.keys():\nif isinstance(j[k], dict):\nprint(_sprint(k) + \":\")\n_print_json(j[k], level + 1)\nelif _is_list_of_dict(j[k]):\nif verbose:\nprint(_sprint(k) + \": [\")\nfor i in range(len(j[k]) - 1):\n_print_json(j[k][0], level + 2)\nprint(_sprint(f\"{indent},\"))\n_print_json(j[k][-1], level + 2)\nprint(_sprint(f\"{indent}]\"))\nelse:\nprint(_sprint(k) + \": [\")\n_print_json(j[k][0], level + 2)\nprint(_sprint(f\"{indent}] ... {len(j[k])-1} more\"))\nelse:\nprint(f\"{_sprint(k)}: {_sprint_json_entry(j[k])}\")\n_print_json(j, level=0)\n</code></pre>"},{"location":"api/pyutils/#pyutils.file.tensorboard","title":"<code>pyutils.file.tensorboard</code>","text":"<p>functions deal with tensorboard logs.</p>"},{"location":"api/pyutils/#pyutils.file.tensorboard.parse_tensorboard_as_dict","title":"<code>pyutils.file.tensorboard.parse_tensorboard_as_dict(path, scalars)</code>","text":"<p>returns a dictionary of pandas dataframes for each requested scalar.</p> <p>Parameters:</p> Name Type Description Default <code>path(str)</code> <p>A file path to a directory containing tf events files, or a single        tf events file. The accumulator will load events from this path.</p> required <code>scalars</code> <code>Iterable[str]</code> <p>scalars</p> required <p>Returns:</p> Type Description <p>Dict[str, pandas.DataFrame]: a dictionary of pandas dataframes for each requested scalar</p> Source code in <code>pyutils/file/tensorboard.py</code> <pre><code>def parse_tensorboard_as_dict(path: str, scalars: Iterable[str]):\n\"\"\"\n    returns a dictionary of pandas dataframes for each requested scalar.\n    Args:\n        path(str): A file path to a directory containing tf events files, or a single\n                   tf events file. The accumulator will load events from this path.\n        scalars:   scalars\n    Returns:\n        Dict[str, pandas.DataFrame]: a dictionary of pandas dataframes for each requested scalar\n    \"\"\"\nea = event_accumulator.EventAccumulator(\npath,\nsize_guidance={event_accumulator.SCALARS: 0},\n)\n_absorb_print = ea.Reload()\n# make sure the scalars are in the event accumulator tags\nassert all(\ns in ea.Tags()[\"scalars\"] for s in scalars\n), \"some scalars were not found in the event accumulator\"\nreturn {k: pd.DataFrame(ea.Scalars(k)) for k in scalars}\n</code></pre>"},{"location":"api/pyutils/#pyutils.file.tensorboard.parse_tensorboard_as_list","title":"<code>pyutils.file.tensorboard.parse_tensorboard_as_list(path, scalars)</code>","text":"<p>returns a list of pandas dataframes for each requested scalar.</p> <p>see also: :py:func:<code>parse_tensorboard_as_dict</code></p> <p>Parameters:</p> Name Type Description Default <code>path(str)</code> <p>A file path to a directory containing tf events files, or a single        tf events file. The accumulator will load events from this path.</p> required <code>scalars</code> <code>Iterable[str]</code> <p>scalars</p> required <p>Returns:</p> Type Description <p>List[pandas.DataFrame]: a list of pandas dataframes for each requested scalar.</p> Source code in <code>pyutils/file/tensorboard.py</code> <pre><code>def parse_tensorboard_as_list(path: str, scalars: Iterable[str]):\n\"\"\"\n    returns a list of pandas dataframes for each requested scalar.\n    see also: :py:func:`parse_tensorboard_as_dict`\n    Args:\n        path(str): A file path to a directory containing tf events files, or a single\n                   tf events file. The accumulator will load events from this path.\n        scalars:   scalars\n    Returns:\n        List[pandas.DataFrame]: a list of pandas dataframes for each requested scalar.\n    \"\"\"\nd = parse_tensorboard_as_dict(path, scalars)\nreturn [d[s] for s in scalars]\n</code></pre>"},{"location":"api/pyutils/#pyutils.math","title":"<code>pyutils.math</code>","text":""},{"location":"api/pyutils/#pyutils.math.prime","title":"<code>pyutils.math.prime</code>","text":""},{"location":"api/pyutils/#pyutils.math.prime.is_prime","title":"<code>pyutils.math.prime.is_prime(number)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>positive integer 'number'</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>true if 'number' is prime otherwise false.</p> Source code in <code>pyutils/math/prime.py</code> <pre><code>def is_prime(number: int):\n\"\"\"\n    Args:\n        number (int): positive integer 'number'\n    Returns:\n        bool: true if 'number' is prime otherwise false.\n    \"\"\"\nimport math  # for function sqrt\n# precondition\nassert isinstance(number, int) and (\nnumber &gt;= 0\n), \"'number' must been an int and positive\"\nstatus = True\n# 0 and 1 are none primes.\nif number &lt;= 1:\nstatus = False\nfor divisor in range(2, int(round(math.sqrt(number))) + 1):\n# if 'number' divisible by 'divisor' then sets 'status'\n# of false and break up the loop.\nif number % divisor == 0:\nstatus = False\nbreak\n# precondition\nassert isinstance(status, bool), \"'status' must been from type bool\"\nreturn status\n</code></pre>"},{"location":"api/pyutils/#pyutils.ml","title":"<code>pyutils.ml</code>","text":""},{"location":"api/pyutils/#pyutils.ml.classification","title":"<code>pyutils.ml.classification</code>","text":""},{"location":"api/pyutils/#pyutils.ml.classification.numpy","title":"<code>pyutils.ml.classification.numpy</code>","text":""},{"location":"api/pyutils/#pyutils.ml.classification.numpy.one_hot","title":"<code>pyutils.ml.classification.numpy.one_hot</code>","text":"<code>pyutils.ml.classification.numpy.one_hot.from_categorical(Y_one_hot)</code> \u00b6 <p>from one-hot encoding</p> <p>Parameters:</p> Name Type Description Default <code>Y_one_hot</code> <code>np.ndarray</code> <p>shape of (nsamples, num_classes)</p> required <p>Returns:</p> Type Description <code>np.ndarray</code> <p>np.ndarray: array of shape (nsamples,)</p> Source code in <code>pyutils/ml/classification/numpy/one_hot.py</code> <pre><code>def from_categorical(Y_one_hot: np.ndarray) -&gt; np.ndarray:\n\"\"\"\n    from one-hot encoding\n    Args:\n        Y_one_hot (np.ndarray): shape of (nsamples, num_classes)\n    Returns:\n        np.ndarray: array of shape (nsamples,)\n    \"\"\"\nassert Y_one_hot.ndim == 2, \"Y_one_hot must be 2-dimensional\"\nn = Y_one_hot.shape[0]\nY = np.zeros(n, dtype=Y_one_hot.dtype)\nfor i in range(n):\nY[i] = np.argmax(Y_one_hot[i])\nreturn Y\n</code></pre> <code>pyutils.ml.classification.numpy.one_hot.to_categorical(Y, num_classes, dtype=np.int64)</code> \u00b6 <p>to one-hot encoding</p> <p>Parameters:</p> Name Type Description Default <code>Y</code> <code>np.ndarray</code> <p>shape of (n_samples,)</p> required <code>num_classes</code> <code>int</code> <p>description</p> required <code>dtype</code> <p>type of elements in return array</p> <code>np.int64</code> <p>Returns:</p> Type Description <code>np.ndarray</code> <p>np.ndarray: array of shape (nsamples, num_classes)</p> Source code in <code>pyutils/ml/classification/numpy/one_hot.py</code> <pre><code>def to_categorical(Y: np.ndarray, num_classes: int, dtype=np.int64) -&gt; np.ndarray:\n\"\"\"\n    to one-hot encoding\n    Args:\n        Y (np.ndarray): shape of (n_samples,)\n        num_classes (int): _description_\n        dtype: type of elements in return array\n    Returns:\n        np.ndarray: array of shape (nsamples, num_classes)\n    \"\"\"\nassert Y.ndim == 1, \"Y must be 1-dimensional\"\nn = Y.shape[0]\nY_one_hot = np.zeros((n, num_classes), dtype=dtype)\nfor i in range(n):\nY_one_hot[i, Y[i]] = 1\nreturn Y_one_hot\n</code></pre>"},{"location":"api/pyutils/#pyutils.path","title":"<code>pyutils.path</code>","text":""},{"location":"api/pyutils/#pyutils.path.listdir_fullpath","title":"<code>pyutils.path.listdir_fullpath(dir)</code>","text":"<p>list directory <code>dir</code>, return fullpaths</p> <p>Parameters:</p> Name Type Description Default <code>dir</code> <code>Path</code> <p>description</p> required <p>Returns:</p> Type Description <code>List[Path]</code> <p>List[Path]: description</p> Source code in <code>pyutils/path/__init__.py</code> <pre><code>@dispatch(Path)\ndef listdir_fullpath(dir: Path) -&gt; List[Path]:\n\"\"\"list directory `dir`, return fullpaths\n    Args:\n        dir (Path): _description_\n    Returns:\n        List[Path]: _description_\n    \"\"\"\nnames = dir.iterdir()\nreturn [dir / i for i in names]\n</code></pre>"},{"location":"api/pyutils/#pyutils.pattern","title":"<code>pyutils.pattern</code>","text":""},{"location":"api/pyutils/#pyutils.pattern.expr","title":"<code>pyutils.pattern.expr</code>","text":""},{"location":"api/pyutils/#pyutils.pattern.expr.pattern_query","title":"<code>pyutils.pattern.expr.pattern_query</code>","text":"<p>Examples:</p> <pre><code>&gt;&gt;&gt; f = pattern_query(lambda x: x==1)\n&gt;&gt;&gt; f(1)\nTrue\n&gt;&gt;&gt; f(2)\nFalse\n</code></pre> Source code in <code>pyutils/pattern/expr.py</code> <pre><code>class pattern_query:\nR\"\"\"\n    Examples:\n        &gt;&gt;&gt; f = pattern_query(lambda x: x==1)\n        &gt;&gt;&gt; f(1)\n        True\n        &gt;&gt;&gt; f(2)\n        False\n    \"\"\"\ndef __init__(self, func=None, type=None):\nself.func = func\nself.type = type\ndef __call__(self, expr) -&gt; bool:\nif self.type is not None:\nif not isinstance(expr, self.type):\nreturn False\nif self.func is not None:\nreturn self.func(expr)\nreturn True\n</code></pre>"},{"location":"api/pyutils/#pyutils.pattern.expr.is_expr_match","title":"<code>pyutils.pattern.expr.is_expr_match(pattern, expr)</code>","text":"<p>match pattern with a python expression expr.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; is_expr_match('a', 'a')\nTrue\n&gt;&gt;&gt; is_expr_match((object, 1), ('s',1))\nTrue\n&gt;&gt;&gt; is_expr_match((object, 1), ('s',2))\nFalse\n&gt;&gt;&gt; is_expr_match(((int, (int,)), (int, (int,)), (-1,)),\n                  ((2146, (6,)), (1124, (97,)), (-1,)))\nTrue\nmatch a numpy array whose shape is (1,2)\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; is_expr_match(\n        pattern_query(lambda arr: arr.shape==(1,2), np.ndarray),\n        np.zeros((1,2)))\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <p>pattern to match</p> required <code>expr</code> <p>python object</p> required <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>Unsupported type</p> <p>Returns:</p> Type Description <p>bool</p> Source code in <code>pyutils/pattern/expr.py</code> <pre><code>def is_expr_match(pattern, expr):\nR\"\"\"match pattern with a python expression expr.\n    Examples:\n        &gt;&gt;&gt; is_expr_match('a', 'a')\n        True\n        &gt;&gt;&gt; is_expr_match((object, 1), ('s',1))\n        True\n        &gt;&gt;&gt; is_expr_match((object, 1), ('s',2))\n        False\n        &gt;&gt;&gt; is_expr_match(((int, (int,)), (int, (int,)), (-1,)),\n                          ((2146, (6,)), (1124, (97,)), (-1,)))\n        True\n        match a numpy array whose shape is (1,2)\n        &gt;&gt;&gt; import numpy as np\n        &gt;&gt;&gt; is_expr_match(\n                pattern_query(lambda arr: arr.shape==(1,2), np.ndarray),\n                np.zeros((1,2)))\n        True\n    Args:\n        pattern: pattern to match\n        expr:  python object\n    Raises:\n        NotImplementedError: Unsupported type\n    Returns:\n        bool\n    \"\"\"\nif type(pattern) == type:  # type\nif not isinstance(expr, pattern):\nreturn False\nelse:  # instance\nif isinstance(pattern, pattern_query):\nreturn pattern(expr)\nif type(pattern) != type(expr):\nreturn False\nif isinstance(pattern, (int, float, str)):\nif pattern != expr:\nreturn False\nelif isinstance(pattern, (tuple, list)):\nif len(pattern) != len(expr):\nreturn False\nfor i in range(len(pattern)):\nif not is_expr_match(pattern[i], expr[i]):\nreturn False\nelif isinstance(pattern, dict):\nif len(pattern) != len(expr):\nreturn False\nfor k in pattern:\ntry:\nif not is_expr_match(pattern[k], expr[k]):\nreturn False\nexcept:\nreturn False\nelse:\nraise NotImplementedError(\"Unsupported type: {}\".format(type(pattern)))\nreturn True\n</code></pre>"},{"location":"api/pyutils/#pyutils.random","title":"<code>pyutils.random</code>","text":""},{"location":"api/pyutils/#pyutils.random.shuffle","title":"<code>pyutils.random.shuffle</code>","text":""},{"location":"api/pyutils/#pyutils.random.shuffle.shuffle","title":"<code>pyutils.random.shuffle.shuffle(lst)</code>","text":"<p>Randomizes the order of the values of an list, returning a new list.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; foo = [1, 2, 3]\n&gt;&gt;&gt; shuffle(foo) # [2, 3, 1], foo = [1, 2, 3]\n</code></pre> Source code in <code>pyutils/random/shuffle.py</code> <pre><code>def shuffle(lst: List):\nR\"\"\"\n    Randomizes the order of the values of an list, returning a new list.\n    Examples:\n        &gt;&gt;&gt; foo = [1, 2, 3]\n        &gt;&gt;&gt; shuffle(foo) # [2, 3, 1], foo = [1, 2, 3]\n    \"\"\"\ntemp_lst = deepcopy(lst)\nm = len(temp_lst)\nwhile m:\nm -= 1\ni = randint(0, m)\ntemp_lst[m], temp_lst[i] = temp_lst[i], temp_lst[m]\nreturn temp_lst\n</code></pre>"},{"location":"api/pyutils/#pyutils.timeit","title":"<code>pyutils.timeit</code>","text":""},{"location":"api/pyutils/#pyutils.timeit.TimeIt","title":"<code>pyutils.timeit.TimeIt</code>","text":"<p>Examples:</p> <pre><code>&gt;&gt;&gt; with TimeIt('msg'):\n&gt;&gt;&gt;     ... # do_something\n</code></pre> Source code in <code>pyutils/timeit.py</code> <pre><code>class TimeIt:\n\"\"\"\n    Examples:\n        &gt;&gt;&gt; with TimeIt('msg'):\n        &gt;&gt;&gt;     ... # do_something\n    \"\"\"\ndef __init__(self, description: str = None, logger=print):\n\"\"\"\n        Args:\n            description (str, optional): _description_. Defaults to None.\n            logger (logging.Logger, optional): _description_. Defaults to log.info.\n        \"\"\"\nself.logger = logger\nself.description = description if description is not None else \"timeit\"\nif self.logger == print:\nself.logger_kwargs = dict()\nelse:\nself.logger_kwargs = dict(stacklevel=2)\ndef __enter__(self):\nself.start = time.time()\nself.logger(f\"[start] {self.description}\", **self.logger_kwargs)\ndef __exit__(self, exc_type, exc_value, tb):\nself.logger(\nf\"[end] {self.description}: {(time.time()-self.start):.2f}s\",\n**self.logger_kwargs,\n)\n</code></pre>"},{"location":"api/pyutils/#pyutils.timeit.TimeIt.__init__","title":"<code>pyutils.timeit.TimeIt.__init__(description=None, logger=print)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>description. Defaults to None.</p> <code>None</code> <code>logger</code> <code>logging.Logger</code> <p>description. Defaults to log.info.</p> <code>print</code> Source code in <code>pyutils/timeit.py</code> <pre><code>def __init__(self, description: str = None, logger=print):\n\"\"\"\n    Args:\n        description (str, optional): _description_. Defaults to None.\n        logger (logging.Logger, optional): _description_. Defaults to log.info.\n    \"\"\"\nself.logger = logger\nself.description = description if description is not None else \"timeit\"\nif self.logger == print:\nself.logger_kwargs = dict()\nelse:\nself.logger_kwargs = dict(stacklevel=2)\n</code></pre>"}]}